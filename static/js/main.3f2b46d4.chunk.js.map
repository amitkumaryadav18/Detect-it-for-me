{"version":3,"sources":["components/ImageBox.js","components/MainSearchBox.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["ImageBox","props","arr","boxes","forEach","box","i","push","className","key","style","top","topRow","left","leftCol","right","rightCol","bottom","bottomRow","src","source","id","alt","console","log","length","app","Clarifai","App","apiKey","MainSearchBox","handleChange","e","setState","url","target","value","createBoundingBox","myarr","image","document","getElementById","display","width","Number","height","top_row","bottom_row","right_col","left_col","displayBox","handleClick","models","predict","state","then","resp","outputs","data","regions","len","region","index","region_info","bounding_box","catch","err","type","placeholder","name","onChange","this","onClick","Component","About","Option","handlePage","isCurrentPage","classList","add","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f2b46d4.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ImageBox(props){\n    const arr = [];\n    props.boxes.forEach((box,i)=>{\n    arr.push(<div className=\"bounding-box\" key={i} style={{top: box.topRow,left:box.leftCol,right:box.rightCol,bottom:box.bottomRow}}></div>)\n       })\n    return(\n        <div className='image-box'>\n            <div className=\"image-container\">\n             <img src = {props.source} id='image' alt=\"something\"/>\n                {arr}\n                {console.log(props.boxes.length)}\n            </div>\n        </div>\n\n        )\n\n}\nexport default ImageBox;","import React,{Component} from 'react';\nimport Clarifai from 'clarifai';\nimport ImageBox from './ImageBox';\n\nconst app = new Clarifai.App({\n    apiKey: 'a4e32735292a4d6695201bbf6984979a'\n   });\n\nclass MainSearchBox extends Component{\n    constructor(){\n        super();\n        this.state = {\n            url: '',\n            box: []\n        }\n        \n    }\n    handleChange=(e)=>{\n        this.setState({url: e.target.value});        \n    }\n    createBoundingBox=(boxes)=>{\n        const myarr = []\n        const image = document.getElementById('image');\n        image.style.display = 'inline-block';\n        const width = Number(image.width);\n        const height = Number(image.height);\n        for(let i=0;i<boxes.length;i++){\n            myarr.push( {\n                topRow: boxes[i].top_row * height,\n                bottomRow: height - (boxes[i].bottom_row*height),\n                rightCol: width - (boxes[i].right_col*width),\n                leftCol : boxes[i].left_col*width\n            })}\n        return myarr;\n    }\n     \n    displayBox=(box)=>{\n        this.setState({box:box});\n        console.log(box);\n    }\n    \n    handleClick=()=>{\n        const arr = [];\n               app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.url)\n                .then( resp =>{\n                   const box = resp.outputs[0].data.regions;\n                   const len = box.length;\n                   console.log(len);\n                   box.forEach((region,index)=>{\n                       arr.push(region.region_info.bounding_box);\n                   })\n                   this.displayBox(this.createBoundingBox(arr));\n               })\n               .catch( err => console.log(err))\n        }\n    render(){\n        return(\n            <div>\n                <div className=\"App\">\n                    <h1>Enter a Url to See the magic!!</h1>\n                    <div className=\"search-box\">\n                        <input type=\"text\" placeholder=\"Paste a url\" name='url' onChange={this.handleChange}/>\n                        \n                        <button className='btn' onClick={this.handleClick}>Submit</button>\n                        <ImageBox source = {this.state.url} boxes = {this.state.box}/>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default MainSearchBox;","import React from 'react';\n\nfunction About(props){\n   console.log(props.Option);\n    \n    return(\n        <div className='about-page'>\n            <h1>Face Detection App</h1>\n            <p>The app can detect multiple faces in an image.\n                It can then tag people for you!\n            </p>\n            <h3>How to use?</h3>\n            <p>Simply, paste the url of the image to url box.And it will show the various faces in the image.</p>\n        </div>\n        )\n}\nexport default About;","import React from 'react';\nimport {Component} from 'react';\nimport MainSearchBox from './components/MainSearchBox';\nimport About from './components/About';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      isCurrentPage: 'app'\n    }\n  }\n  handlePage=(e)=>{\n   if(this.state.isCurrentPage==='about'&&e.target.classList[0]==='app'){\n    this.setState({isCurrentPage:'app'});\n    e.target.classList.add('selected-item');\n  }\n   else if(e.target.classList[0]==='about'){\n    this.setState({isCurrentPage:'about'});\n    \n  }\n  }\n\n  render(){\n    return (\n      <div className=\"container\">\n        <nav className=\"nav-bar\">\n                <ul className=\"row\">\n                    <li onClick={this.handlePage} className='app'>App</li>\n                    <li onClick={this.handlePage} className='about'>About</li>\n                    <li>Modes</li>\n                </ul>\n            </nav>\n        {this.state.isCurrentPage === 'app'\n        ?<MainSearchBox Option = {this.state.isCurrentPage} />\n        :<About/>\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/background.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}